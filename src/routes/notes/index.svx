---
layout: notes
---

<script>
    import Note from './_Note.svelte';
</script>

<!-- NOTES -->

<Note datetime="2022-06-29T15:58:36.740Z">

## Back up code with another Git remote

At 42 school, we need to push code of projects to an internal Git server to be evaluated. However, I prefer to work on GitHub so that my code is public, and I benefit from Pull Requests, GitHub Actions, etc. When the project is finished, or to back up the project, I also push on the Git server of the school.

I create a new remote for the Git server of the school:

```sh
git remote add 42 <school-remote>
```

And then I push to it (mostly the *main* branch):

```sh
git push 42 main
```

</Note>

<Note datetime="2022-06-28T14:22:24.628Z">

## Storing verification tokens into database

I use the following method to verify the email of users of my applications:

1. Generate a token (with [nanoid](https://github.com/ai/nanoid))
1. Store the token into database, attached to the user to verify
1. Send a link containing the token to the user
1. When link is clicked, verify the account of the user attached to the token received as parameter

The issue with this solution is that if somebody gets read access to the database, they can verify the account of users as tokens are stored in plain-text.

To prevent that, tokens need to be hashed before being stored in database. We then have the following steps:

1. Generate a token
1. Hash and store the token into database
1. Send a link containing the **plain-text** token to the user
1. When link is clicked, hash the token received as parameter, and compare it to hashed tokens stored in database, and verify the account of the user owning the token

There is one subtle thing to take into account: the hash algorithm should not use a random salt. The hash of the same token should always produce the exact same string, so that hashed token can be found back when querying the database with an exact string match. As a consequence, neither bcrypt nor argon can be used (when they should for password hashing), as they use a random salt to improve security.

Instead, SHA-256 can be a good option. [Node.js `crypto` module](https://nodejs.org/api/crypto.html) can be used to generate such a hash:

```ts twoslash
// @types: @types/node
import { createHash } from 'crypto';

const token = '...';
const hash = createHash('sha256').update(token).digest('base64');
```

</Note>

<Note datetime="2022-06-28T12:54:30.489Z">

## Linking of native libraries of an Expo app in a monorepo

In a monorepo, uses of a native library can be separated from the codebase of the Expo application: all the code of the application can be extracted in a package consumed by different applications, like Expo and Next.js, as recommended by [Solito](https://solito.dev/).

If the native library is not installed in the `package.json` of the Expo application itself, it won't be linked and the application won't work when in productionâ€”it may work during development.

So, the native library *can* be installed in the package where it's used, but it *must* be installed in the Expo application.

</Note>

<Note datetime="2022-04-12T15:53:43.170Z">

## Stress testing with Artillery

To ensure a server can handle a certain amount of requests per second for a certain delay, we can use [stress testing](https://en.wikipedia.org/wiki/Stress_testing).

[Artillery](https://www.artillery.io/) is a library for stress testing. We define *scenarios* in a YAML file and how we want to simulate users making requests accord to scenarios. Here is an example of configuration for a chat application:

```yaml
# chat.yaml

config:
  target: "http://localhost:3333"
  phases:
    # Create up to 10 virtual users per second in one minute
    - duration: 60
      arrivalRate: 10
    # Create up to 100 virtual users per second in ten minutes
    - duration: 600
      arrivalRate: 100

scenarios:
  # Enable sending Socket.io events
  - engine: "socketio"
    flow:
      # Create a user
      - post:
          url: "/sign-up"
          json:
            username: "Jean-Louis Murat"
            password: "La Princesse of the Cool"

      # Get my information
      - get:
          url: "/me"

      # Add a friend
      - post:
          url: "/friend"
          json:
            id: "b0518bea-4df4-415c-a01d-129ecae34c33"

      # Send a message to my friend
      # HTTP requests and Socket.io events can be mixed!
      - emit:
          channel: "chat"
          data:
            userId: "b0518bea-4df4-415c-a01d-129ecae34c33"
            message: "Hello JL!"
```

</Note>

<Note datetime="2022-04-08T15:45:10.557Z">

## Create a named group in a JavaScript RegExp

To create a named group in a JavaScript RegExp, we can use the `(?<name>...)` syntax:

```ts twoslash
// @lib: esnext
const text = 'foo bar foo'
const regex = /(?<wanted>bar)/

const result = regex.exec(text)
if (result === null) {
    throw new Error('No match')
}

const wantedGroup = result.groups?.wanted
//        ^?
```

</Note>

<Note datetime="2022-04-07T18:20:30.111Z">

## Stop a Docker container and remove its volumes

Sometimes I want to restart from the ground up a database launched in a Docker container and to remove its data entirely.

I found that [`docker compose down`](https://docs.docker.com/compose/reference/down/) command has an option to do so:

```bash
docker-compose down <container name> --volumes
```

That way, the volumes attached to `<container name>` will be removed as well as the container.

</Note>

<Note datetime="2022-03-26T19:38:17.144Z">

## Override version of a dependency of another dependency with npm

I am using *[shiki-twoslash](https://github.com/shikijs/twoslash)* to highlight code snippets on my blog, and to provide type annotations for JavaScript and TypeScript code. I've been trying to write blocks of Svelte code, but highlighting was failing once I used Svelte's features belong pure HTML elements, such as [if blocks](https://svelte.dev/tutorial/if-blocks).

After several tries, I finally found that *shiki-twoslash* was using an old version of *[shiki](https://github.com/shikijs/shiki)*, the tool that actually highlights code.

I've been able to tell *shiki-twoslash* to use the newest version of *shiki* thanks to [`overrides`](https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides) propery of `package.json`:

```json
{
    "devDependencies": {
        // shiki-twoslash depends on shiki
        "shiki-twoslash": "^3.0.2"
    },
    "overrides": {
        // Override shiki version for all dependencies (and their children) that use it
        "shiki": "^0.10.1",

        // Or only override the version used by shiki-twoslash
        "shiki-twoslash": {
            "shiki": "^0.10.1"
        }
    }
}
```

</Note>

<Note datetime="2022-03-24T18:23:52.893Z">

## Move recent commits to another branch

Sometimes I end up making commits on a `main` branch, while I wanted to make them on a feature branch.

Say we made three commits we want to move to another branch. We can follow those steps:

```sh
# If the feature branch does not exist, create it
git switch -C feature-branch
# Otherwise, switch to it
git switch feature-branch

git merge main
git push origin feature-branch # Be sure to save commits before deleting them from main branch

git switch - # Go back to main branch
git reset --hard HEAD~3 # Go back 3 commits, so all the commits we made are deleted from main branch
git switch - # Go back to feature branch
```

This snipped is adapted from [an excellent StackOverflow post](https://stackoverflow.com/a/1628584).

</Note>

<Note datetime="2022-03-12T17:11:37.794Z">

## Test NativeBase's `Select` component

I tried to test the [`Select`](https://docs.nativebase.io/select) component of NativeBase, but it took me some time to succeed. I am testing a React Native application, with Jest's React Native preset.

Here is the code using `Select` component:

```tsx
import React, { useState } from 'react';
import { Select } from 'native-base';

function App() {
    const [selectedValue, setSelectedValue] = useState('Paris');

    return (
        <Select
            // ðŸ‘‡ We'll use the placeholder to get the current value of the select
            placeholder="Select your city"
            // ðŸ‘‡ We'll use the accessibilityLabel to open the select
            accessibilityLabel="Select your city"
            selectedValue={selectedValue}
            onValueChange={setSelectedValue}
        >
            {/*
                ðŸ‘‡ Each item will be targetable by its label,
                which will be rendered in a <Text /> component
            */}
            <Select.Item label="Paris" value="Paris" />
            <Select.Item label="Berlin" value="Berlin" />
            <Select.Item label="London" value="London" />
        </Select>
    );
}
```

Now, in a test, we can assert the current value of the select:

```tsx
import React from 'react';
import { render, waitFor } from '@testing-library/react-native';

test('Assert current value of the select', async () => {
    const screen = render(<App />);

    // ðŸ‘‡ A <TextInput /> rendered internally contains the current value
    const selectInput = await screen.findByPlaceholderText(/select.*country/i);
    await waitFor(() => {
        expect(selectInput).toHaveProp('value', 'Paris');
    });
});
```

And we can change the value of the select:

```tsx
import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';

test('Change value of the select', async () => {
    const screen = render(<App />);

    // Open the select
    fireEvent(
        await screen.findByLabelText(/select.*country/i),
        'click', // ðŸ‘ˆ We must use `click` instead of `press`
    );

    // Click on an option by its label
    fireEvent(await screen.findByText('London'), 'click'); // ðŸ‘ˆ We must use `click` event too

    const selectInput = await screen.findByPlaceholderText(/select.*country/i);
    await waitFor(() => {
        expect(selectInput).toHaveProp('value', 'London');
    });
});
```

I could not determine the reason, but the inner components of the select listen to `click` event instead of `press` event.

</Note>

<Note datetime="2022-01-31T12:20:54.468Z">

## A subquery can not be the `DEFAULT` value of a column in PostgreSQL

Today I wanted to create a column which default value would have been the primary key of an exact row from another table.

Basically, I created a table that serves as an enum and inserted the values of the enum in the same migration. I wanted the column of another table to default to one of the enum values.

I tried to write the following query:

```sql
ALTER TABLE
    users
ADD COLUMN
    devices_visibility_setting_uuid UUID DEFAULT (
        SELECT
            uuid
        FROM
            setting_visibilities
        WHERE
            name = 'PUBLIC'
    );
```

But Postgres told me that we can not use a subquery as a `DEFAULT` value.

The [Postgres documentation](https://www.postgresql.org/docs/current/ddl-default.html) strictly mentions that we can use either a static value, or a function. But there is no mention to using subqueries.

My workaround was to compute the primary key (an uuid) of the enum value row in JS, inside the migration file, use it when I create the row in the enum table, and then use this uuid in the `DEFAULT` value of the column.

I ended up with the following queries, which work:

```sql
INSERT INTO
    setting_visibilities (
        uuid,
        name
    )
VALUES
    (
        ${publicVisibilitySettingRowUUID},
        'PUBLIC'
    );

ALTER TABLE
    users
ADD COLUMN
    devices_visibility_setting_uuid UUID DEFAULT ${publicVisibilitySettingRowUUID};
```

### Edit

Finally I decided to do not put this business logic in the database, but in my back-end code. When I create a new user, I attach it to the row I want in the enum table.

</Note>

<Note datetime="2022-01-26T22:10:48.212Z">

## Git Worktrees to manage several workspaces for the same repository

Today, David Khourshid shared on Twitter that [he likes having several copies of the same repository on his computer](https://twitter.com/DavidKPiano/status/1486322809424994310) to be able try some things out without impacting his current work.

Then he shared a link to [Git Worktree documentation](https://git-scm.com/docs/git-worktree), that seems to be a really good way to solve this issue.

We can create a worktree from the current branch:

```bash
$ git worktree add ../path-to-new-worktree
```

This command will create a directory at the specified path as well as a branch whose name is the last part of the path, here `path-to-new-worktree`.

The created directory will contain *only* all tracked files from the origin branch, not files that are gitignored. As a consequence, dependencies would have to be installed on the new directory.

We can also explicitly provide a name to the branch to create:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree
```

It is also possible to create a worktree from an existing branch, instead of defaulting to the current branch:

```bash
$ git worktree add ../path-to-new-worktree existing-branch
```

And to combine both:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree existing-branch
```

Every commit made on a worktree will be visible to other worktrees as they take place in the same repository.

After work has been done on a worktree, we can delete it by its path (`./` also works):

```bash
$ git worktree remove ../path-to-new-worktree
```

</Note>

<Note datetime="2022-01-25T23:13:39.343Z">

## Links to resources on same domain with SvelteKit

By default, [SvelteKit](https://kit.svelte.dev/) intercepts all clicks on links pointing to pages of the application, and handles the navigation so that the browser does not refresh.

However, SvelteKit will also try to handle links to resources on the same domain, such as images, videos, PDF documents, etc.

To solve this issue, SvelteKit provides a way to create links that trigger a real browser navigation, by specifying the `rel="external"` attribute on `a` tags:

```html {2}
<a
    href="/document.pdf"
    rel="external"
>
    Link to PDF document
</a>
```

The really cool thing is that SvelteKit did not invent the value `external` for `rel` attribute, but instead it is [a standard value for links to external resources](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-external). By default this value has no behavior, it can just be used to apply specific styles to external links. But SvelteKit *progressively enhances* it.

</Note>
