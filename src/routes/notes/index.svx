---
layout: notes
---

<script>
    import Note from './_Note.svelte';
</script>

<!-- NOTES -->

<Note datetime="2022-03-12T17:11:37.794Z">

## Test NativeBase's `Select` component

I tried to test the [`Select`](https://docs.nativebase.io/select) component of NativeBase, but it took me some time to succeed. I am testing a React Native application, with Jest's React Native preset.

Here is the code using `Select` component:

```tsx
import React, { useState } from 'react';
import { Select } from 'native-base';

function App() {
    const [selectedValue, setSelectedValue] = useState('Paris');

    return (
        <Select
            // ðŸ‘‡ We'll use the placeholder to get the current value of the select
            placeholder="Select your city"
            // ðŸ‘‡ We'll use the accessibilityLabel to open the select
            accessibilityLabel="Select your city"
            selectedValue={selectedValue}
            onValueChange={setSelectedValue}
        >
            {/*
                ðŸ‘‡ Each item will be targetable by its label,
                which will be rendered in a <Text /> component
            */}
            <Select.Item label="Paris" value="Paris" />
            <Select.Item label="Berlin" value="Berlin" />
            <Select.Item label="London" value="London" />
        </Select>
    );
}
```

Now, in a test, we can assert the current value of the select:

```tsx
import React from 'react';
import { render, waitFor } from '@testing-library/react-native';

test('Assert current value of the select', async () => {
    const screen = render(<App />);

    // ðŸ‘‡ A <TextInput /> rendered internally contains the current value
    const selectInput = await screen.findByPlaceholderText(/select.*country/i);
    await waitFor(() => {
        expect(selectInput).toHaveProp('value', 'Paris');
    });
});
```

And we can change the value of the select:

```tsx
import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react-native';

test('Change value of the select', async () => {
    const screen = render(<App />);

    // Open the select
    fireEvent(
        await screen.findByLabelText(/select.*country/i),
        'click', // ðŸ‘ˆ We must use `click` instead of `press`
    );

    // Click on an option by its label
    fireEvent(await screen.findByText('London'), 'click'); // ðŸ‘ˆ We must use `click` event too

    const selectInput = await screen.findByPlaceholderText(/select.*country/i);
    await waitFor(() => {
        expect(selectInput).toHaveProp('value', 'London');
    });
});
```

I could not determine the reason, but the inner components of the select listen to `click` event instead of `press` event.

</Note>

<Note datetime="2022-01-31T12:20:54.468Z">

## A subquery can not be the `DEFAULT` value of a column in PostgreSQL

Today I wanted to create a column which default value would have been the primary key of an exact row from another table.

Basically, I created a table that serves as an enum and inserted the values of the enum in the same migration. I wanted the column of another table to default to one of the enum values.

I tried to write the following query:

```sql
ALTER TABLE
    users
ADD COLUMN
    devices_visibility_setting_uuid UUID DEFAULT (
        SELECT
            uuid
        FROM
            setting_visibilities
        WHERE
            name = 'PUBLIC'
    );
```

But Postgres told me that we can not use a subquery as a `DEFAULT` value.

The [Postgres documentation](https://www.postgresql.org/docs/current/ddl-default.html) strictly mentions that we can use either a static value, or a function. But there is no mention to using subqueries.

My workaround was to compute the primary key (an uuid) of the enum value row in JS, inside the migration file, use it when I create the row in the enum table, and then use this uuid in the `DEFAULT` value of the column.

I ended up with the following queries, which work:

```sql
INSERT INTO
    setting_visibilities (
        uuid,
        name
    )
VALUES
    (
        ${publicVisibilitySettingRowUUID},
        'PUBLIC'
    );

ALTER TABLE
    users
ADD COLUMN
    devices_visibility_setting_uuid UUID DEFAULT ${publicVisibilitySettingRowUUID};
```

### Edit

Finally I decided to do not put this business logic in the database, but in my back-end code. When I create a new user, I attach it to the row I want in the enum table.

</Note>

<Note datetime="2022-01-26T22:10:48.212Z">

## Git Worktrees to manage several workspaces for the same repository

Today, David Khourshid shared on Twitter that [he likes having several copies of the same repository on his computer](https://twitter.com/DavidKPiano/status/1486322809424994310) to be able try some things out without impacting his current work.

Then he shared a link to [Git Worktree documentation](https://git-scm.com/docs/git-worktree), that seems to be a really good way to solve this issue.

We can create a worktree from the current branch:

```bash
$ git worktree add ../path-to-new-worktree
```

This command will create a directory at the specified path as well as a branch whose name is the last part of the path, here `path-to-new-worktree`.

The created directory will contain *only* all tracked files from the origin branch, not files that are gitignored. As a consequence, dependencies would have to be installed on the new directory.

We can also explicitly provide a name to the branch to create:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree
```

It is also possible to create a worktree from an existing branch, instead of defaulting to the current branch:

```bash
$ git worktree add ../path-to-new-worktree existing-branch
```

And to combine both:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree existing-branch
```

Every commit made on a worktree will be visible to other worktrees as they take place in the same repository.

After work has been done on a worktree, we can delete it by its path (`./` also works):

```bash
$ git worktree remove ../path-to-new-worktree
```

</Note>

<Note datetime="2022-01-25T23:13:39.343Z">

## Links to resources on same domain with SvelteKit

By default, [SvelteKit](https://kit.svelte.dev/) intercepts all clicks on links pointing to pages of the application, and handles the navigation so that the browser does not refresh.

However, SvelteKit will also try to handle links to resources on the same domain, such as images, videos, PDF documents, etc.

To solve this issue, SvelteKit provides a way to create links that trigger a real browser navigation, by specifying the `rel="external"` attribute on `a` tags:

```html {2}
<a
    href="/document.pdf"
    rel="external"
>
    Link to PDF document
</a>
```

The really cool thing is that SvelteKit did not invent the value `external` for `rel` attribute, but instead it is [a standard value for links to external resources](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-external). By default this value has no behavior, it can just be used to apply specific styles to external links. But SvelteKit *progressively enhances* it.

</Note>
