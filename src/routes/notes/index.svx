---
layout: notes
---

<script>
    import Note from './_Note.svelte';
</script>

<!-- NOTES -->

<Note datetime="2022-01-26T22:10:48.212Z">

## Git Worktrees to manage several workspaces for the same repository

Today, David Khourshid shared on Twitter that [he likes having several copies of the same repository on his computer](https://twitter.com/DavidKPiano/status/1486322809424994310) to be able try some things out without impacting his current work.

Then he shared a link to [Git Worktree documentation](https://git-scm.com/docs/git-worktree), that seems to be a really good way to solve this issue.

We can create a worktree from the current branch:

```bash
$ git worktree add ../path-to-new-worktree
```

This command will create a directory at the specified path as well as a branch whose name is the last part of the path, here `path-to-new-worktree`.

The created directory will contain *only* all tracked files from the origin branch, not files that are gitignored. As a consequence, dependencies would have to be installed on the new directory.

We can also explicitly provide a name to the branch to create:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree
```

It is also possible to create a worktree from an existing branch, instead of defaulting to the current branch:

```bash
$ git worktree add ../path-to-new-worktree existing-branch
```

And to combine both:

```bash
$ git worktree add -b branch-name ../path-to-new-worktree existing-branch
```

Every commit made on a worktree will be visible to other worktrees as they take place in the same repository.

After work has been done on a worktree, we can delete it by its path (`./` also works):

```bash
$ git worktree remove ../path-to-new-worktree
```

</Note>

<Note datetime="2022-01-25T23:13:39.343Z">

## Links to resources on same domain with SvelteKit

By default, [SvelteKit](https://kit.svelte.dev/) intercepts all clicks on links pointing to pages of the application, and handles the navigation so that the browser does not refresh.

However, SvelteKit will also try to handle links to resources on the same domain, such as images, videos, PDF documents, etc.

To solve this issue, SvelteKit provides a way to create links that trigger a real browser navigation, by specifying the `rel="external"` attribute on `a` tags:

```html {2}
<a
    href="/document.pdf"
    rel="external"
>
    Link to PDF document
</a>
```

The really cool thing is that SvelteKit did not invent the value `external` for `rel` attribute, but instead it is [a standard value for links to external resources](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-external). By default this value has no behavior, it can just be used to apply specific styles to external links. But SvelteKit *progressively enhances* it.

</Note>
